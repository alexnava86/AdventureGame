trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
- name: buildConfiguration
  value: 'Release'
- name: unityImage
  value: 'unityci/editor:ubuntu-2019.4.28f1-windows-mono-3.1.0'
- group: Secrets

steps:
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '5.x'
    installationPath: $(Agent.ToolsDirectory)/dotnet

- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.x'
    addToPath: true

- script: |
    echo "Verifying Environment Variables"
    echo "UNITY_EMAIL: $UNITY_EMAIL"
    echo "UNITY_USERNAME: $UNITY_USERNAME"
    echo "UNITY_PASSWORD: $UNITY_PASSWORD"
  displayName: 'Verify Environment Variables'

- script: |
    echo "Pulling Unity Docker Image"
    docker pull $(unityImage)
  displayName: 'Pull Unity Docker Image'

- script: |
    echo "Generating Unity .alf File"
    docker run --rm \
      -v $(Build.SourcesDirectory):/project \
      $(unityImage) \
      /opt/unity/Editor/Unity \
      -batchmode -nographics -logFile /project/unity-log.txt \
      -createManualActivationFile

    echo "Listing project directory to verify .alf file"
    ls -la $(Build.SourcesDirectory)
  displayName: 'Generate Unity .alf File'

- script: |
    echo "Checking if .alf file exists"
    find $(Build.SourcesDirectory) -name "*.alf"
  displayName: 'Check .alf File Existence'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.SourcesDirectory)/*.alf'
    ArtifactName: 'alfFile'
    publishLocation: 'Container'
  displayName: 'Publish Unity .alf File'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.SourcesDirectory)/unity-log.txt'
    ArtifactName: 'unityLogs'
    publishLocation: 'Container'
  displayName: 'Publish Unity Log File'
