trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
- name: buildConfiguration
  value: 'Release'
- name: unityImage
  value: 'unityci/editor:ubuntu-2019.4.28f1-windows-mono-3.1.0'
- group: Secrets

steps:
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '5.x'
    installationPath: $(Agent.ToolsDirectory)/dotnet

- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.x'
    addToPath: true

- task: DownloadSecureFile@1
  inputs:
    secureFile: 'Unity_lic.ulf'
  displayName: 'Download Unity License File'

- script: |
    echo "Verifying Environment Variables"
    echo "UNITY_EMAIL: $UNITY_EMAIL"
    echo "UNITY_USERNAME: $UNITY_USERNAME"
    echo "UNITY_PASSWORD: $UNITY_PASSWORD"
  displayName: 'Verify Environment Variables'

- script: |
    echo "Pulling Unity Docker Image"
    docker pull $(unityImage)
  displayName: 'Pull Unity Docker Image'

- script: |
    echo "Generating Unity .alf File"
    docker run --rm \
      -v $(Build.SourcesDirectory):/project \
      -w /project \
      $(unityImage) \
      /opt/unity/Editor/Unity \
      -batchmode -nographics -createManualActivationFile -logFile /dev/stdout
  displayName: 'Generate Unity .alf File'

- script: |
    echo "Listing directory contents to find .alf file"
    ls -la /project
  displayName: 'List Directory Contents'

- script: |
    if [ -f /project/Unity_v2019.x.alf ]; then
      echo ".alf file exists"
    else
      echo ".alf file does not exist"
      exit 1
    fi
  displayName: 'Check .alf File Existence'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.SourcesDirectory)/*.alf'
    ArtifactName: 'unity-alf-file'
    publishLocation: 'Container'
  displayName: 'Publish Unity .alf File'
