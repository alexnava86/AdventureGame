trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
- name: buildConfiguration
  value: 'Release'
- name: unityImage
  value: 'unityci/editor:ubuntu-2019.4.28f1-windows-mono-3.1.0'
- group: Secrets

steps:
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '5.x'
    installationPath: $(Agent.ToolsDirectory)/dotnet

- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.x'
    addToPath: true

- task: DownloadSecureFile@1
  inputs:
    secureFile: 'Unity_lic.ulf'
  displayName: 'Download Unity License File'

- script: |
    echo "Verifying Environment Variables"
    echo "UNITY_EMAIL: $UNITY_EMAIL"
    echo "UNITY_USERNAME: $UNITY_USERNAME"
    echo "UNITY_PASSWORD: $UNITY_PASSWORD"
  displayName: 'Verify Environment Variables'

- script: |
    echo "Pulling Unity Docker Image"
    docker pull $(unityImage)
  displayName: 'Pull Unity Docker Image'

- script: |
    echo "Activating Unity License"
    docker run --rm \
      -v $(Agent.TempDirectory)/Unity_lic.ulf:/root/.local/share/unity3d/Unity/Unity_lic.ulf \
      -e UNITY_EMAIL=$UNITY_EMAIL \
      -e UNITY_PASSWORD=$UNITY_PASSWORD \
      -e UNITY_SERIAL='' \
      $(unityImage) \
      /opt/unity/Editor/Unity \
      -quit -batchmode -nographics -logFile -
  displayName: 'Activate Unity License'

# Build the Unity project
- script: |
    echo "Running Unity Build in Docker"
    docker run --rm \
      -v $(Build.SourcesDirectory):/project \
      -v $(Build.ArtifactStagingDirectory):/project/Builds \
      -v $(Agent.TempDirectory)/Unity_lic.ulf:/root/.local/share/unity3d/Unity/Unity_lic.ulf \
      -w /project \
      -e UNITY_USERNAME=$UNITY_USERNAME \
      -e UNITY_PASSWORD=$UNITY_PASSWORD \
      $(unityImage) \
      /opt/unity/Editor/Unity \
      -quit -batchmode -nographics \
      -logFile /dev/stdout \
      -projectPath /project \
      -buildTarget StandaloneWindows64 \
      -executeMethod BuildScript.BuildWindows
  displayName: 'Build Unity Project with Docker'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'
