trigger:
- main

pool:
  vmImage: 'ubuntu-latest' 

variables:
  buildConfiguration: 'Release'
  unityImage: 'unityci/editor:ubuntu-2018.4.28f1-windows-mono-3.1.0'

steps:
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '5.x'
    installationPath: $(Agent.ToolsDirectory)/dotnet
steps:
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '5.x'
    installationPath: $(Agent.ToolsDirectory)/dotnet

- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.x'
    addToPath: true

- script: |
    echo "Pulling Unity Docker Image"
    docker pull $(unityImage)
  displayName: 'Pull Unity Docker Image'

- script: |
    echo "Activating Unity License"
    docker run --rm \
      -e UNITY_EMAIL=$(UNITY_EMAIL) \
      -e UNITY_PASSWORD=$(UNITY_PASSWORD) \
      -e UNITY_SERIAL='' \
      $(unityImage) \
      /opt/unity/Editor/Unity \
      -quit -batchmode -nographics -logFile - \
      -username "$UNITY_USERNAME" -password "$UNITY_PASSWORD" -serial ''
  displayName: 'Activate Unity License'

- script: |
    echo "Running Unity Build in Docker"
    docker run --rm \
      -v $(Build.SourcesDirectory):/project \
      -v $(Build.ArtifactStagingDirectory):/project/Builds \
      -w /project \
      $(unityImage) \
      /opt/unity/Editor/Unity \
      -quit -batchmode -nographics \
      -logFile /dev/stdout \
      -projectPath /project \
      -buildTarget StandaloneWindows64 \
      -executeMethod BuildScript.Build
  displayName: 'Build Unity Project with Docker'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'